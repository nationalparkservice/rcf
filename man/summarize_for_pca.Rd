% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarize_for_pca.R
\name{summarize_for_pca}
\alias{summarize_for_pca}
\title{Summarize threshold values to allocate climate futures by PCA*}
\usage{
summarize_for_pca(
  SiteID,
  data = NULL,
  past_years = c(1950, 2000),
  future_year = 2040,
  directory = tempdir()
)
}
\arguments{
\item{SiteID}{chosen name to use in file names, attributes, and
directories. (character)}

\item{data}{Default dataset to use for the .csv files this function will create.
Follow vignette for example dataset creation. This should be the output of
the \code{calc_thresholds} function (data frame)}

\item{past_years}{years to base past data off of. Cannot be any earlier than 1950.
Must be written as c(past_start, past_end). Defaults to 1950:2000 (numeric)}

\item{future_year}{year to center changes from historical data around. Defaults to
2040 (numeric)}

\item{directory}{where to save files to. Per CRAN guidelines, this
defaults to a temporary directory and files created will be lost after
R session ends. Specify a path to retain files.}
}
\value{
A csv that has summarized threshold values across all years for all models.
This csv can be directly used to calculate model selection by pca using the \code{cf_pca}
function.
}
\description{
Takes data from \code{calc_thresholds} and summarizes the thresholds to be used to find
most extreme climate futures from principal components analysis (PCA)
}
\details{
*For advanced users only.
}
\examples{


\dontrun{
# Generate sample data

data <- data.frame(
 date = sample(seq(as.Date('1950/01/01'), as.Date('2099/12/31'), by="day"), 1000),
 yr = rep(c(1980, 2040, 1980, 2040, 1980, 2040, 1980, 2040, 1980, 2040, 1980, 2040, 1980,
            2040, 1980, 2040, 1980, 2040, 1980, 2040), each = 50),
 month = rep(c(1:10), each = 100),
 quarter = rep(rep(c("DJF", "MAM", "JJA", "SON"), each = 250)),
 gcm = rep(c("bcc-csm1-1.rcp45", "BNU-ESM.rcp45", "CanESM2.rcp85", "CCSM4.rcp45",
             "CSIRO-Mk3-6-0.rcp45"), each = 200),
 precip = rnorm(1000),
 tmin = rnorm(1000),
 tmax = rnorm(1000),
 rhmax = rnorm(1000),
 rhmin = rnorm(1000),
 tavg = rnorm(1000),
 heat_index = rnorm(1000),
 heat_index_ec = rnorm(1000),
 heat_index_dan = rnorm(1000),
 temp_over_95_pctl =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 temp_over_99_pctl =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 temp_over_95_pctl_length =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000,
                                               replace = TRUE)),
 temp_under_freeze =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 temp_under_freeze_length =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000,
                                               replace = TRUE)),
 temp_under_5_pctl =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 no_precip  =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 no_precip_length =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 precip_95_pctl =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 precip_99_pctl =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 precip_moderate =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 precip_heavy =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 freeze_thaw =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 gdd =  as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 gdd_count = rnorm(1000),
 not_gdd_count = rnorm(1000),
 frost = as.logical(sample(x = c("TRUE","FALSE"), size = 1000, replace = TRUE)),
 grow_length = rnorm(1000),
 units = rep("imperial", each = 1000)
)

summarize_for_pca("SCBL", data = data)
}

}
