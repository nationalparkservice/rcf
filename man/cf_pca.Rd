% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cf_pca.R
\name{cf_pca}
\alias{cf_pca}
\title{Calculate climate futures using PCA*}
\usage{
cf_pca(
  SiteID = "unnamed_site",
  data = NULL,
  variables = "all_threshold",
  num_cf = 4,
  directory = tempdir()
)
}
\arguments{
\item{SiteID}{chosen name to use in file names, attributes, and directories. Default
name is "unnamed_site" (character)}

\item{data}{Default dataset to use for the .csv files this function will create.
Follow vignette for example dataset creation. (data frame)}

\item{variables}{Variables you want the PCA to be based off of. Must match column names
from dataframe in \code{data} parameter exactly. If running directly from
\code{summarize_for_pca} and would like to use all threshold values to select models,
write "all_threshold" (character)}

\item{num_cf}{Number of climate futures to select. Option of 2 or 4. Two models will be the
maximum and minimum values of principal component 1 (PC1), and 4 will be the maximum
and minimun values of principal component 2 (PC2)}

\item{directory}{where to save files to. Per CRAN guidelines, this
defaults to a temporary directory and files created will be lost after
R session ends. Specify a path to retain files.}
}
\value{
One (1) csv file that has selected either 2 or 4 models, depending on \code{num_cf} chosen
based upon PCA
One (1) png file of the PCA scatterplot, with models labeled
}
\description{
Designates climate futures of "Warm Wet", "Warm Dry", "Hot Wet", "Hot Dry" and "Central"
and calculates mean values for each GCM. Will additionally calculate which models
represent the largest spread in data of variables entered using PCA. Calculates
summary of threshold values based off of selected summarization parameter and PCA.
}
\details{
*For advanced users only.
}
\examples{

#' @examples
\dontrun{
# Generate sample data

data <- data.frame(
date = sample(seq(as.Date('1950/01/01'), as.Date('2099/12/31'), by="day"), 100),
yr = rep(c(1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040, 2050), each = 10),
month = rep(c(1:10), each = 10),
quarter = rep(rep(c("DJF", "MAM", "JJA", "SON"), each = 25)),
gcm = paste0(rep(letters[1:5], each = 20),
rep(letters[1:20], each = 5),
rep(letters[20:26], each = 1)),
precip = rnorm(100),
tmin = rnorm(100),
tmax = rnorm(100),
rhmax = rnorm(100),
rhmin = rnorm(100),
tavg = rnorm(100)
heat_index = rnorm(100)
heat_index_ec = rnorm(100),
heat_index_dan = rnorm(100),
temp_over_95_pctl =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
temp_over_99_pctl =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
temp_over_95_pctl_length =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
temp_under_freeze =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
temp_under_freeze_length =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
temp_under_5_pctl =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
no_precip  =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
no_precip_length =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
precip_95_pctl =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
precip_99_pctl =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
precip_moderate =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
precip_heavy =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
freeze_thaw =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
gdd =  sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
gdd_count = rnorm(100),
not_gdd_count = rnorm(100),
frost = sample(x = c("TRUE","FALSE"), size = 100, replace = TRUE),
grow_length = rnorm(100)
)

cf_pca("SCBL", data = data, variables = c("tmin", "tmax", "rhmin"),
num_cf = 2)
}

}
